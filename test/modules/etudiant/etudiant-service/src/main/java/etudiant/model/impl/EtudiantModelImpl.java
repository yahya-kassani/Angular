/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package etudiant.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import etudiant.model.Etudiant;
import etudiant.model.EtudiantModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Etudiant service. Represents a row in the &quot;LL_Etudiant&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EtudiantModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EtudiantImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EtudiantImpl
 * @generated
 */
@JSON(strict = true)
public class EtudiantModelImpl
	extends BaseModelImpl<Etudiant> implements EtudiantModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a etudiant model instance should use the <code>Etudiant</code> interface instead.
	 */
	public static final String TABLE_NAME = "LL_Etudiant";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"etudiantId", Types.BIGINT},
		{"nom", Types.VARCHAR}, {"prenom", Types.VARCHAR},
		{"imageId", Types.BIGINT}, {"classeId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("etudiantId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("prenom", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classeId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LL_Etudiant (uuid_ VARCHAR(75) null,etudiantId LONG not null primary key,nom VARCHAR(75) null,prenom VARCHAR(75) null,imageId LONG,classeId LONG)";

	public static final String TABLE_SQL_DROP = "drop table LL_Etudiant";

	public static final String ORDER_BY_JPQL =
		" ORDER BY etudiant.etudiantId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LL_Etudiant.etudiantId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ETUDIANTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EtudiantModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _etudiantId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEtudiantId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _etudiantId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Etudiant.class;
	}

	@Override
	public String getModelClassName() {
		return Etudiant.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Etudiant, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Etudiant, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Etudiant, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Etudiant)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Etudiant, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Etudiant, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Etudiant)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Etudiant, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Etudiant, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Etudiant, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Etudiant, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Etudiant, Object>>();

			attributeGetterFunctions.put("uuid", Etudiant::getUuid);
			attributeGetterFunctions.put("etudiantId", Etudiant::getEtudiantId);
			attributeGetterFunctions.put("nom", Etudiant::getNom);
			attributeGetterFunctions.put("prenom", Etudiant::getPrenom);
			attributeGetterFunctions.put("imageId", Etudiant::getImageId);
			attributeGetterFunctions.put("classeId", Etudiant::getClasseId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Etudiant, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Etudiant, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Etudiant, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Etudiant, String>)Etudiant::setUuid);
			attributeSetterBiConsumers.put(
				"etudiantId",
				(BiConsumer<Etudiant, Long>)Etudiant::setEtudiantId);
			attributeSetterBiConsumers.put(
				"nom", (BiConsumer<Etudiant, String>)Etudiant::setNom);
			attributeSetterBiConsumers.put(
				"prenom", (BiConsumer<Etudiant, String>)Etudiant::setPrenom);
			attributeSetterBiConsumers.put(
				"imageId", (BiConsumer<Etudiant, Long>)Etudiant::setImageId);
			attributeSetterBiConsumers.put(
				"classeId", (BiConsumer<Etudiant, Long>)Etudiant::setClasseId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEtudiantId() {
		return _etudiantId;
	}

	@Override
	public void setEtudiantId(long etudiantId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_etudiantId = etudiantId;
	}

	@JSON
	@Override
	public String getNom() {
		if (_nom == null) {
			return "";
		}
		else {
			return _nom;
		}
	}

	@Override
	public void setNom(String nom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nom = nom;
	}

	@JSON
	@Override
	public String getPrenom() {
		if (_prenom == null) {
			return "";
		}
		else {
			return _prenom;
		}
	}

	@Override
	public void setPrenom(String prenom) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_prenom = prenom;
	}

	@JSON
	@Override
	public long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(long imageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_imageId = imageId;
	}

	@JSON
	@Override
	public long getClasseId() {
		return _classeId;
	}

	@Override
	public void setClasseId(long classeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classeId = classeId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Etudiant.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Etudiant toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Etudiant>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EtudiantImpl etudiantImpl = new EtudiantImpl();

		etudiantImpl.setUuid(getUuid());
		etudiantImpl.setEtudiantId(getEtudiantId());
		etudiantImpl.setNom(getNom());
		etudiantImpl.setPrenom(getPrenom());
		etudiantImpl.setImageId(getImageId());
		etudiantImpl.setClasseId(getClasseId());

		etudiantImpl.resetOriginalValues();

		return etudiantImpl;
	}

	@Override
	public Etudiant cloneWithOriginalValues() {
		EtudiantImpl etudiantImpl = new EtudiantImpl();

		etudiantImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		etudiantImpl.setEtudiantId(
			this.<Long>getColumnOriginalValue("etudiantId"));
		etudiantImpl.setNom(this.<String>getColumnOriginalValue("nom"));
		etudiantImpl.setPrenom(this.<String>getColumnOriginalValue("prenom"));
		etudiantImpl.setImageId(this.<Long>getColumnOriginalValue("imageId"));
		etudiantImpl.setClasseId(this.<Long>getColumnOriginalValue("classeId"));

		return etudiantImpl;
	}

	@Override
	public int compareTo(Etudiant etudiant) {
		long primaryKey = etudiant.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Etudiant)) {
			return false;
		}

		Etudiant etudiant = (Etudiant)object;

		long primaryKey = etudiant.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Etudiant> toCacheModel() {
		EtudiantCacheModel etudiantCacheModel = new EtudiantCacheModel();

		etudiantCacheModel.uuid = getUuid();

		String uuid = etudiantCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			etudiantCacheModel.uuid = null;
		}

		etudiantCacheModel.etudiantId = getEtudiantId();

		etudiantCacheModel.nom = getNom();

		String nom = etudiantCacheModel.nom;

		if ((nom != null) && (nom.length() == 0)) {
			etudiantCacheModel.nom = null;
		}

		etudiantCacheModel.prenom = getPrenom();

		String prenom = etudiantCacheModel.prenom;

		if ((prenom != null) && (prenom.length() == 0)) {
			etudiantCacheModel.prenom = null;
		}

		etudiantCacheModel.imageId = getImageId();

		etudiantCacheModel.classeId = getClasseId();

		return etudiantCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Etudiant, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Etudiant, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Etudiant, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Etudiant)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Etudiant>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Etudiant.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _etudiantId;
	private String _nom;
	private String _prenom;
	private long _imageId;
	private long _classeId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Etudiant, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Etudiant)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("etudiantId", _etudiantId);
		_columnOriginalValues.put("nom", _nom);
		_columnOriginalValues.put("prenom", _prenom);
		_columnOriginalValues.put("imageId", _imageId);
		_columnOriginalValues.put("classeId", _classeId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("etudiantId", 2L);

		columnBitmasks.put("nom", 4L);

		columnBitmasks.put("prenom", 8L);

		columnBitmasks.put("imageId", 16L);

		columnBitmasks.put("classeId", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Etudiant _escapedModel;

}